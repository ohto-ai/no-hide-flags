# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: Publish Release
on:
  release:
    types: [published]

jobs:
  Get-Properties:
    runs-on: ubuntu-latest
    outputs:
      release-type: ${{ steps.type.outputs.release-type }}
      mod-version: ${{ steps.properties.outputs.mod_version }}
      minecraft-version: ${{ steps.properties.outputs.minecraft_version }}
      curse-versions: ${{ steps.properties.outputs.release-curse-versions }}
    steps:
      - name: Checkout the sources
        uses: actions/checkout@v4
      - name: Determine release type
        id: type
        run: |
          if "${{ github.event.release.prerelease }}"; then
            echo "release-type=beta" >> $GITHUB_OUTPUT
          else
            echo "release-type=release" >> $GITHUB_OUTPUT
          fi
      - name: Read relevant fields from gradle.properties
        id: properties
        run: | # From christian-draeger/read-properties, using the action makes it extremely messy until christian-draeger/read-properties#2
          path='./gradle.properties'
          for property in mod_version minecraft_version release-curse-versions
          do
            result=$(sed -n "/^[[:space:]]*$property[[:space:]]*=[[:space:]]*/s/^[[:space:]]*$property[[:space:]]*=[[:space:]]*//p" "$path")
            echo "$property: $result"
            echo "$property=$result" >> $GITHUB_OUTPUT
          done
      - uses: actions/github-script@v7
        env:
          READ_VERSION: ${{ steps.properties.outputs.mod_version }}
        with:
          script: |
            const { READ_VERSION } = process.env;
            console.log('Read version is: ' + READ_VERSION);
            let releases = (await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            })).data;
            console.log('Previous release was: ' + releases[1].name);
            for (let release of releases.slice(1)) {
              if (release.name.includes(READ_VERSION))
                core.setFailed('Version number is the same as a previous release!')
            }
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: setup jdk
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: build/libs/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from previous job
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: ./release-artifacts
      - name: Upload artifact to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.MOD_RELEASE_GH_PAT }}

  publish:
    needs: [build,Get-Properties]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from previous job
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: ./release-artifacts
      - name: Find correct JAR
        id: findjar
        run: |
          output="$(find release-artifacts/ ! -name "*-dev.jar" ! -name "*-sources.jar" -type f -printf "%f\n")"
          echo "jarname=$output" >> $GITHUB_OUTPUT}}
      - name: "Upload to CurseForge"
        uses: itsmeow/curseforge-upload@v3
        with:
          file_path: release-artifacts/${{ steps.findjar.outputs.jarname }}
          game_endpoint: "minecraft"
          relations: "fabric-api:requiredDependency"
          game_versions: "${{ needs.Get-Properties.outputs.release-curse-versions }},Java 21,Fabric"
          project_id: 1283440
          token: "${{ secrets.CF_API_TOKEN }}"
          changelog_type: markdown
          changelog: ${{ github.event.release.body }}
          display_name: NoHideFlags v${{ needs.Get-Properties.outputs.mod-version }} for ${{ needs.Get-Properties.outputs.release-curse-versions }}
          release_type: ${{ needs.Get-Properties.outputs.release-type }}

# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on: [pull_request, push]

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@v4
      - name: setup jdk
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: build/libs/

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from previous job
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: ./release-artifacts

      - name: Upload artifact to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.MOD_RELEASE_GH_PAT }}

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from previous job
        uses: actions/download-artifact@v4
        with:
          name: Artifacts
          path: ./release-artifacts

      - name: Get prerelease status
        id: get_release_info
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.MOD_RELEASE_GH_PAT }}

      - name: Set release type
        id: set_release_type
        run: |
          echo "release_type=$(jq -r '.data.prerelease | if . then "alpha" else "release" end' <<< '${{ steps.get_release_info.outputs.data }}')" >> $GITHUB_OUTPUT

      - name: Filter out source jars
        id: filter_files
        run: |
          mkdir filtered-artifacts
          find ./release-artifacts -type f -name '*.jar' ! -name '*-sources.jar' -exec cp {} filtered-artifacts/ \;

      - name: "Upload to CurseForge"
        uses: itsmeow/curseforge-upload@v3
        with:
          file_path: "filtered-artifacts/*"
          game_endpoint: "minecraft"
          relations: "fabric-api:requiredDependency"
          game_versions: "Minecraft 1.21:1.21.1:1.21.2:1.21.3:1.21.4,Java 21,Fabric"
          project_id: "1283440"
          release_type: ${{ steps.set_release_type.outputs.release_type }}
          token: "${{ secrets.CF_API_TOKEN }}"


